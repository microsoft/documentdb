name: Build RPM packages
concurrency:
  group: build-rpm-packages-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
    paths-ignore:
      - '.devcontainer/**'
      - '*.md'
  pull_request:
    types: [opened, reopened, synchronize]
    paths:
      - 'packaging/**'
      - 'scripts/**'


jobs:
  build-rpm-packages:
    runs-on: ${{ matrix.runner }}
    name: ${{ matrix.os }}-${{ matrix.arch }}-pg${{ matrix.pg_version }}
    strategy:
      fail-fast: false
      matrix:
        os: [rhel8, rhel9]
        arch: [amd64]
        include:
          - arch: amd64
            runner: ubuntu-24.04
        pg_version:
          - 16
          - 17

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract and Format Default Version
        id: extract_version
        run: |
          DOCUMENTDB_VERSION=$(grep -E "^default_version" pg_documentdb_core/documentdb_core.control | sed -E "s/.*'([0-9]+\.[0-9]+-[0-9]+)'.*/\1/")
          DOCUMENTDB_VERSION=$(echo $DOCUMENTDB_VERSION | sed "s/-/./g")
          echo "Extracted Version: $DOCUMENTDB_VERSION"
          echo "DOCUMENTDB_VERSION=$DOCUMENTDB_VERSION" >> $GITHUB_ENV

      - name: Build RPM Package
        run: |
          ./packaging/build_packages.sh --os ${{ matrix.os }} --pg ${{ matrix.pg_version }} --version ${{ env.DOCUMENTDB_VERSION }} --test-clean-install

      - name: Sign RPM packages
        # if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          sudo apt-get update && sudo apt-get install -y rpm gnupg2
          
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
          
          # Configure GPG for non-interactive use
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          gpgconf --kill gpg-agent
          
          # Get the key ID from the imported key
          KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep 'sec' | head -n1 | sed 's/.*\/\([A-F0-9]*\).*/\1/')
          GPG_NAME=$(gpg --list-keys --keyid-format LONG "$KEY_ID" | grep 'uid' | head -n1 | sed 's/uid.*] //')
          echo "Using key ID: $KEY_ID"
          echo "Using GPG name: $GPG_NAME"
          
          # Configure RPM macros for signing
          echo "%_gpg_name $KEY_ID" >> ~/.rpmmacros
          echo "%_gpg_path $HOME/.gnupg" >> ~/.rpmmacros
          echo "%_signature gpg" >> ~/.rpmmacros
          echo "%__gpg_sign_cmd %{__gpg} gpg --batch --yes --pinentry-mode loopback --passphrase-fd 0 -u \"%{_gpg_name}\" -sbo %{__signature_filename} --digest-algo sha256 %{__plaintext_filename}" >> ~/.rpmmacros
          
          # Sign all RPM packages
          for rpm_file in packaging/*.rpm; do
            if [[ -f "$rpm_file" ]]; then
              echo "Signing RPM package: $rpm_file"
              echo "$GPG_PASSPHRASE" | rpm --addsign "$rpm_file"
            fi
          done
          
          # Export public key for verification (same as DEB packages)
          gpg --armor --export "$KEY_ID" > packaging/documentdb-rpm-signing-key.asc

      - name: Upload RPM Package as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}-pg${{ matrix.pg_version }}-documentdb-${{ env.DOCUMENTDB_VERSION }}
          path: |
            packaging/*.rpm
            packaging/documentdb-rpm-signing-key.asc
          retention-days: 7
          if-no-files-found: error
          compression-level: 0
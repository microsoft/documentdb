SET search_path TO helio_core,helio_api,helio_api_catalog,helio_api_internal;
SET citus.next_shard_id TO 912000;
SET helio_api.next_collection_id TO 9120;
SET helio_api.next_collection_index_id TO 9120;
SELECT helio_api.insert_one('db', 'graph_lookup_employees', '{ "_id" : 1, "name" : "Dev" }');
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db', 'graph_lookup_employees', '{ "_id" : 2, "name" : "Eliot", "reportsTo" : "Dev" }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db', 'graph_lookup_employees', '{ "_id" : 3, "name" : "Ron", "reportsTo" : "Eliot" }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db', 'graph_lookup_employees', '{ "_id" : 4, "name" : "Andrew", "reportsTo" : "Eliot" }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db', 'graph_lookup_employees', '{ "_id" : 5, "name" : "Asya", "reportsTo" : "Ron" }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db', 'graph_lookup_employees', '{ "_id" : 6, "name" : "Dan", "reportsTo" : "Andrew" }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT document FROM helio_api_catalog.bson_aggregation_pipeline('db',
    '{ "aggregate": "graph_lookup_employees", "pipeline": [ { "$graphLookup": { "from": "graph_lookup_employees", "startWith": "$reportsTo", "connectFromField": "reportsTo", "connectToField": "name", "as": "reportingHierarchy" } } ]}');
                                                                                                                                                      document                                                                                                                                                      
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "name" : "Dev", "reportingHierarchy" : [  ] }
 { "_id" : { "$numberInt" : "2" }, "name" : "Eliot", "reportsTo" : "Dev", "reportingHierarchy" : [ { "_id" : { "$numberInt" : "1" }, "name" : "Dev" } ] }
 { "_id" : { "$numberInt" : "3" }, "name" : "Ron", "reportsTo" : "Eliot", "reportingHierarchy" : [ { "_id" : { "$numberInt" : "1" }, "name" : "Dev" }, { "_id" : { "$numberInt" : "2" }, "name" : "Eliot", "reportsTo" : "Dev" } ] }
 { "_id" : { "$numberInt" : "4" }, "name" : "Andrew", "reportsTo" : "Eliot", "reportingHierarchy" : [ { "_id" : { "$numberInt" : "1" }, "name" : "Dev" }, { "_id" : { "$numberInt" : "2" }, "name" : "Eliot", "reportsTo" : "Dev" } ] }
 { "_id" : { "$numberInt" : "5" }, "name" : "Asya", "reportsTo" : "Ron", "reportingHierarchy" : [ { "_id" : { "$numberInt" : "1" }, "name" : "Dev" }, { "_id" : { "$numberInt" : "2" }, "name" : "Eliot", "reportsTo" : "Dev" }, { "_id" : { "$numberInt" : "3" }, "name" : "Ron", "reportsTo" : "Eliot" } ] }
 { "_id" : { "$numberInt" : "6" }, "name" : "Dan", "reportsTo" : "Andrew", "reportingHierarchy" : [ { "_id" : { "$numberInt" : "1" }, "name" : "Dev" }, { "_id" : { "$numberInt" : "2" }, "name" : "Eliot", "reportsTo" : "Dev" }, { "_id" : { "$numberInt" : "4" }, "name" : "Andrew", "reportsTo" : "Eliot" } ] }
(6 rows)

EXPLAIN (VERBOSE ON, COSTS OFF) SELECT document FROM helio_api_catalog.bson_aggregation_pipeline('db',
    '{ "aggregate": "graph_lookup_employees", "pipeline": [ { "$graphLookup": { "from": "graph_lookup_employees", "startWith": "$reportsTo", "connectFromField": "reportsTo", "connectToField": "name", "as": "reportingHierarchy" } } ]}');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT helio_api_internal.bson_dollar_merge_documents(document, "addFields") AS document FROM (SELECT "graphLookupBase_stage_1".document, COALESCE((SELECT COALESCE(helio_api_catalog.bson_array_agg(agg_stage_sub_1_0.document, 'reportingHierarchy'::text), '{ "reportingHierarchy" : [  ] }'::helio_core.bson) AS document FROM (WITH RECURSIVE "graphLookupRecurseStage" AS (SELECT "*TLOCRN*".document, "*TLOCRN*".depth, "*TLOCRN*"."baseDocId", false AS is_cycle, ARRAY[ROW("*TLOCRN*"."baseDocId")] AS path FROM (SELECT collection_0_2.document, '{ "depth" : { "$numberInt" : "0" } }'::helio_core.bson AS depth, helio_api_catalog.bson_expression_get(collection_0_2.document, '{ "_id" : "$_id" }'::helio_core.bson) AS "baseDocId" FROM helio_data.documents_9120_912000 collection_0_2 WHERE ((collection_0_2.shard_key_value OPERATOR(pg_catalog.=) '9120'::bigint) AND helio_api_catalog.bson_dollar_in(collection_0_2.document, "graphLookupBase_stage_1"."inputExpr"))) "*TLOCRN*"(document, depth, "baseDocId") UNION ALL SELECT "*TROCRN*".document, "*TROCRN*".depth, "*TROCRN*"."baseDocId", CASE WHEN (ROW("*TROCRN*"."baseDocId") OPERATOR(pg_catalog.=) ANY ("*TROCRN*".path)) THEN true ELSE false END AS is_cycle, array_cat("*TROCRN*".path, ARRAY[ROW("*TROCRN*"."baseDocId")]) AS path FROM (SELECT collection_0_2.document, helio_api_catalog.bson_dollar_add_fields("lookupRecursive_stage_1".depth, '{ "depth" : { "$add" : [ "$depth", { "$numberInt" : "1" } ] } }'::helio_core.bson) AS depth, helio_api_catalog.bson_expression_get(collection_0_2.document, '{ "_id" : "$_id" }'::helio_core.bson) AS "baseDocId", "lookupRecursive_stage_1".is_cycle, "lookupRecursive_stage_1".path FROM helio_data.documents_9120_912000 collection_0_2, "graphLookupRecurseStage" "lookupRecursive_stage_1" WHERE ((collection_0_2.shard_key_value OPERATOR(pg_catalog.=) '9120'::bigint) AND helio_api_catalog.bson_dollar_in(collection_0_2.document, helio_api_catalog.bson_expression_get("lookupRecursive_stage_1".document, '{ "name" : { "$makeArray" : "$reportsTo" } }'::helio_core.bson, false)))) "*TROCRN*"(document, depth, "baseDocId", is_cycle, path) WHERE ("*TROCRN*".is_cycle OPERATOR(pg_catalog.<>) true)) SELECT DISTINCT ON ("graphLookup_stage_2"."baseDocId") "graphLookup_stage_2".document FROM "graphLookupRecurseStage" "graphLookup_stage_2" ORDER BY "graphLookup_stage_2"."baseDocId", "graphLookup_stage_2".depth) agg_stage_sub_1_0), '{ "reportingHierarchy" : [  ] }'::helio_core.bson) AS "addFields" FROM (SELECT collection.document, helio_api_catalog.bson_expression_get(collection.document, '{ "name" : { "$makeArray" : "$reportsTo" } }'::helio_core.bson, false) AS "inputExpr" FROM helio_data.documents_9120_912000 collection WHERE (collection.shard_key_value OPERATOR(pg_catalog.=) '9120'::bigint)) "graphLookupBase_stage_1") "graphLookup_stage_1"
         Node: host=localhost port=58070 dbname=regression
         ->  Bitmap Heap Scan on helio_data.documents_9120_912000 collection
               Output: helio_api_internal.bson_dollar_merge_documents(collection.document, COALESCE((SubPlan 2), '{ "reportingHierarchy" : [  ] }'::helio_core.bson))
               Recheck Cond: (collection.shard_key_value = '9120'::bigint)
               ->  Bitmap Index Scan on _id_
                     Index Cond: (collection.shard_key_value = '9120'::bigint)
               SubPlan 2
                 ->  Aggregate
                       Output: COALESCE(helio_api_catalog.bson_array_agg("graphLookup_stage_2".document, 'reportingHierarchy'::text), '{ "reportingHierarchy" : [  ] }'::helio_core.bson)
                       ->  Unique
                             Output: "graphLookup_stage_2".document, "graphLookup_stage_2"."baseDocId", "graphLookup_stage_2".depth
                             CTE graphLookupRecurseStage
                               ->  Recursive Union
                                     ->  Bitmap Heap Scan on helio_data.documents_9120_912000 collection_0_2
                                           Output: collection_0_2.document, '{ "depth" : { "$numberInt" : "0" } }'::helio_core.bson, helio_api_catalog.bson_expression_get(collection_0_2.document, '{ "_id" : "$_id" }'::helio_core.bson, false), false, ARRAY[ROW(helio_api_catalog.bson_expression_get(collection_0_2.document, '{ "_id" : "$_id" }'::helio_core.bson, false))]
                                           Recheck Cond: (collection_0_2.shard_key_value = '9120'::bigint)
                                           Filter: (collection_0_2.document OPERATOR(helio_api_catalog.@*=) helio_api_catalog.bson_expression_get(collection.document, '{ "name" : { "$makeArray" : "$reportsTo" } }'::helio_core.bson, false))
                                           ->  Bitmap Index Scan on _id_
                                                 Index Cond: (collection_0_2.shard_key_value = '9120'::bigint)
                                     ->  Nested Loop
                                           Output: collection_0_2_1.document, helio_api_catalog.bson_dollar_add_fields("lookupRecursive_stage_1".depth, '{ "depth" : { "$add" : [ "$depth", { "$numberInt" : "1" } ] } }'::helio_core.bson), helio_api_catalog.bson_expression_get(collection_0_2_1.document, '{ "_id" : "$_id" }'::helio_core.bson, false), CASE WHEN (ROW(helio_api_catalog.bson_expression_get(collection_0_2_1.document, '{ "_id" : "$_id" }'::helio_core.bson, false)) = ANY ("lookupRecursive_stage_1".path)) THEN true ELSE false END, array_cat("lookupRecursive_stage_1".path, ARRAY[ROW(helio_api_catalog.bson_expression_get(collection_0_2_1.document, '{ "_id" : "$_id" }'::helio_core.bson, false))])
                                           Join Filter: helio_api_catalog.bson_dollar_in(collection_0_2_1.document, helio_api_catalog.bson_expression_get("lookupRecursive_stage_1".document, '{ "name" : { "$makeArray" : "$reportsTo" } }'::helio_core.bson, false))
                                           ->  WorkTable Scan on "graphLookupRecurseStage" "lookupRecursive_stage_1"
                                                 Output: "lookupRecursive_stage_1".document, "lookupRecursive_stage_1".depth, "lookupRecursive_stage_1"."baseDocId", "lookupRecursive_stage_1".is_cycle, "lookupRecursive_stage_1".path
                                                 Filter: (NOT "lookupRecursive_stage_1".is_cycle)
                                           ->  Materialize
                                                 Output: collection_0_2_1.document
                                                 ->  Bitmap Heap Scan on helio_data.documents_9120_912000 collection_0_2_1
                                                       Output: collection_0_2_1.document
                                                       Recheck Cond: (collection_0_2_1.shard_key_value = '9120'::bigint)
                                                       ->  Bitmap Index Scan on _id_
                                                             Index Cond: (collection_0_2_1.shard_key_value = '9120'::bigint)
                             ->  Sort
                                   Output: "graphLookup_stage_2".document, "graphLookup_stage_2"."baseDocId", "graphLookup_stage_2".depth
                                   Sort Key: "graphLookup_stage_2"."baseDocId", "graphLookup_stage_2".depth
                                   ->  CTE Scan on "graphLookupRecurseStage" "graphLookup_stage_2"
                                         Output: "graphLookup_stage_2".document, "graphLookup_stage_2"."baseDocId", "graphLookup_stage_2".depth
(43 rows)

SELECT helio_api.insert_one('db', 'graph_lookup_airports', '{ "_id" : 0, "airport" : "JFK", "connects" : [ "BOS", "ORD" ] }');
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db', 'graph_lookup_airports', '{ "_id" : 1, "airport" : "BOS", "connects" : [ "JFK", "PWM" ] }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db', 'graph_lookup_airports', '{ "_id" : 2, "airport" : "ORD", "connects" : [ "JFK" ] }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db', 'graph_lookup_airports', '{ "_id" : 3, "airport" : "PWM", "connects" : [ "BOS", "LHR" ] }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db', 'graph_lookup_airports', '{ "_id" : 4, "airport" : "LHR", "connects" : [ "PWM" ] }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db', 'graph_lookup_travelers', '{ "_id" : 1, "name" : "Dev", "nearestAirport" : "JFK" }');
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db', 'graph_lookup_travelers', '{ "_id" : 2, "name" : "Eliot", "nearestAirport" : "JFK" }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db', 'graph_lookup_travelers', '{ "_id" : 3, "name" : "Jeff", "nearestAirport" : "BOS" }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT document FROM helio_api_catalog.bson_aggregation_pipeline('db',
    '{ "aggregate": "graph_lookup_travelers", "pipeline": [ { "$graphLookup": { "from": "graph_lookup_airports", "startWith": "$nearestAirport", "connectFromField": "connects", "connectToField": "airport", "as": "destinations", "maxDepth": 2 } } ]}');
                                                                                                                                                                                                                                                              document                                                                                                                                                                                                                                                              
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "name" : "Dev", "nearestAirport" : "JFK", "destinations" : [ { "_id" : { "$numberInt" : "0" }, "airport" : "JFK", "connects" : [ "BOS", "ORD" ] }, { "_id" : { "$numberInt" : "1" }, "airport" : "BOS", "connects" : [ "JFK", "PWM" ] }, { "_id" : { "$numberInt" : "2" }, "airport" : "ORD", "connects" : [ "JFK" ] }, { "_id" : { "$numberInt" : "3" }, "airport" : "PWM", "connects" : [ "BOS", "LHR" ] } ] }
 { "_id" : { "$numberInt" : "2" }, "name" : "Eliot", "nearestAirport" : "JFK", "destinations" : [ { "_id" : { "$numberInt" : "0" }, "airport" : "JFK", "connects" : [ "BOS", "ORD" ] }, { "_id" : { "$numberInt" : "1" }, "airport" : "BOS", "connects" : [ "JFK", "PWM" ] }, { "_id" : { "$numberInt" : "2" }, "airport" : "ORD", "connects" : [ "JFK" ] }, { "_id" : { "$numberInt" : "3" }, "airport" : "PWM", "connects" : [ "BOS", "LHR" ] } ] }
 { "_id" : { "$numberInt" : "3" }, "name" : "Jeff", "nearestAirport" : "BOS", "destinations" : [ { "_id" : { "$numberInt" : "0" }, "airport" : "JFK", "connects" : [ "BOS", "ORD" ] }, { "_id" : { "$numberInt" : "1" }, "airport" : "BOS", "connects" : [ "JFK", "PWM" ] }, { "_id" : { "$numberInt" : "2" }, "airport" : "ORD", "connects" : [ "JFK" ] }, { "_id" : { "$numberInt" : "3" }, "airport" : "PWM", "connects" : [ "BOS", "LHR" ] }, { "_id" : { "$numberInt" : "4" }, "airport" : "LHR", "connects" : [ "PWM" ] } ] }
(3 rows)

EXPLAIN (VERBOSE ON, COSTS OFF) SELECT document FROM helio_api_catalog.bson_aggregation_pipeline('db',
    '{ "aggregate": "graph_lookup_travelers", "pipeline": [ { "$graphLookup": { "from": "graph_lookup_airports", "startWith": "$nearestAirport", "connectFromField": "connects", "connectToField": "airport", "as": "destinations", "maxDepth": 2 } } ]}');
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   QUERY PLAN                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT helio_api_internal.bson_dollar_merge_documents(document, "addFields") AS document FROM (SELECT "graphLookupBase_stage_1".document, COALESCE((SELECT COALESCE(helio_api_catalog.bson_array_agg(agg_stage_sub_1_0.document, 'destinations'::text), '{ "destinations" : [  ] }'::helio_core.bson) AS document FROM (WITH RECURSIVE "graphLookupRecurseStage" AS (SELECT "*TLOCRN*".document, "*TLOCRN*".depth, "*TLOCRN*"."baseDocId", false AS is_cycle, ARRAY[ROW("*TLOCRN*"."baseDocId")] AS path FROM (SELECT collection_0_2.document, '{ "depth" : { "$numberInt" : "0" } }'::helio_core.bson AS depth, helio_api_catalog.bson_expression_get(collection_0_2.document, '{ "_id" : "$_id" }'::helio_core.bson) AS "baseDocId" FROM helio_data.documents_9121_912019 collection_0_2 WHERE ((collection_0_2.shard_key_value OPERATOR(pg_catalog.=) '9121'::bigint) AND helio_api_catalog.bson_dollar_in(collection_0_2.document, "graphLookupBase_stage_1"."inputExpr"))) "*TLOCRN*"(document, depth, "baseDocId") UNION ALL SELECT "*TROCRN*".document, "*TROCRN*".depth, "*TROCRN*"."baseDocId", CASE WHEN (ROW("*TROCRN*"."baseDocId") OPERATOR(pg_catalog.=) ANY ("*TROCRN*".path)) THEN true ELSE false END AS is_cycle, array_cat("*TROCRN*".path, ARRAY[ROW("*TROCRN*"."baseDocId")]) AS path FROM (SELECT collection_0_2.document, helio_api_catalog.bson_dollar_add_fields("lookupRecursive_stage_1".depth, '{ "depth" : { "$add" : [ "$depth", { "$numberInt" : "1" } ] } }'::helio_core.bson) AS depth, helio_api_catalog.bson_expression_get(collection_0_2.document, '{ "_id" : "$_id" }'::helio_core.bson) AS "baseDocId", "lookupRecursive_stage_1".is_cycle, "lookupRecursive_stage_1".path FROM helio_data.documents_9121_912019 collection_0_2, "graphLookupRecurseStage" "lookupRecursive_stage_1" WHERE ((collection_0_2.shard_key_value OPERATOR(pg_catalog.=) '9121'::bigint) AND helio_api_catalog.bson_dollar_in(collection_0_2.document, helio_api_catalog.bson_expression_get("lookupRecursive_stage_1".document, '{ "airport" : { "$makeArray" : "$connects" } }'::helio_core.bson, false)) AND ("lookupRecursive_stage_1".depth OPERATOR(helio_api_catalog.#<) '{ "depth" : { "$numberInt" : "2" } }'::helio_core.bsonquery))) "*TROCRN*"(document, depth, "baseDocId", is_cycle, path) WHERE ("*TROCRN*".is_cycle OPERATOR(pg_catalog.<>) true)) SELECT DISTINCT ON ("graphLookup_stage_2"."baseDocId") "graphLookup_stage_2".document FROM "graphLookupRecurseStage" "graphLookup_stage_2" ORDER BY "graphLookup_stage_2"."baseDocId", "graphLookup_stage_2".depth) agg_stage_sub_1_0), '{ "destinations" : [  ] }'::helio_core.bson) AS "addFields" FROM (SELECT collection.document, helio_api_catalog.bson_expression_get(collection.document, '{ "airport" : { "$makeArray" : "$nearestAirport" } }'::helio_core.bson, false) AS "inputExpr" FROM helio_data.documents_9122_912038 collection WHERE (collection.shard_key_value OPERATOR(pg_catalog.=) '9122'::bigint)) "graphLookupBase_stage_1") "graphLookup_stage_1"
         Node: host=localhost port=58070 dbname=regression
         ->  Bitmap Heap Scan on helio_data.documents_9122_912038 collection
               Output: helio_api_internal.bson_dollar_merge_documents(collection.document, COALESCE((SubPlan 2), '{ "destinations" : [  ] }'::helio_core.bson))
               Recheck Cond: (collection.shard_key_value = '9122'::bigint)
               ->  Bitmap Index Scan on _id_
                     Index Cond: (collection.shard_key_value = '9122'::bigint)
               SubPlan 2
                 ->  Aggregate
                       Output: COALESCE(helio_api_catalog.bson_array_agg("graphLookup_stage_2".document, 'destinations'::text), '{ "destinations" : [  ] }'::helio_core.bson)
                       ->  Unique
                             Output: "graphLookup_stage_2".document, "graphLookup_stage_2"."baseDocId", "graphLookup_stage_2".depth
                             CTE graphLookupRecurseStage
                               ->  Recursive Union
                                     ->  Bitmap Heap Scan on helio_data.documents_9121_912019 collection_0_2
                                           Output: collection_0_2.document, '{ "depth" : { "$numberInt" : "0" } }'::helio_core.bson, helio_api_catalog.bson_expression_get(collection_0_2.document, '{ "_id" : "$_id" }'::helio_core.bson, false), false, ARRAY[ROW(helio_api_catalog.bson_expression_get(collection_0_2.document, '{ "_id" : "$_id" }'::helio_core.bson, false))]
                                           Recheck Cond: (collection_0_2.shard_key_value = '9121'::bigint)
                                           Filter: (collection_0_2.document OPERATOR(helio_api_catalog.@*=) helio_api_catalog.bson_expression_get(collection.document, '{ "airport" : { "$makeArray" : "$nearestAirport" } }'::helio_core.bson, false))
                                           ->  Bitmap Index Scan on _id_
                                                 Index Cond: (collection_0_2.shard_key_value = '9121'::bigint)
                                     ->  Nested Loop
                                           Output: collection_0_2_1.document, helio_api_catalog.bson_dollar_add_fields("lookupRecursive_stage_1".depth, '{ "depth" : { "$add" : [ "$depth", { "$numberInt" : "1" } ] } }'::helio_core.bson), helio_api_catalog.bson_expression_get(collection_0_2_1.document, '{ "_id" : "$_id" }'::helio_core.bson, false), CASE WHEN (ROW(helio_api_catalog.bson_expression_get(collection_0_2_1.document, '{ "_id" : "$_id" }'::helio_core.bson, false)) = ANY ("lookupRecursive_stage_1".path)) THEN true ELSE false END, array_cat("lookupRecursive_stage_1".path, ARRAY[ROW(helio_api_catalog.bson_expression_get(collection_0_2_1.document, '{ "_id" : "$_id" }'::helio_core.bson, false))])
                                           Join Filter: helio_api_catalog.bson_dollar_in(collection_0_2_1.document, helio_api_catalog.bson_expression_get("lookupRecursive_stage_1".document, '{ "airport" : { "$makeArray" : "$connects" } }'::helio_core.bson, false))
                                           ->  WorkTable Scan on "graphLookupRecurseStage" "lookupRecursive_stage_1"
                                                 Output: "lookupRecursive_stage_1".document, "lookupRecursive_stage_1".depth, "lookupRecursive_stage_1"."baseDocId", "lookupRecursive_stage_1".is_cycle, "lookupRecursive_stage_1".path
                                                 Filter: ((NOT "lookupRecursive_stage_1".is_cycle) AND ("lookupRecursive_stage_1".depth OPERATOR(helio_api_catalog.#<) '{ "depth" : { "$numberInt" : "2" } }'::helio_core.bsonquery))
                                           ->  Materialize
                                                 Output: collection_0_2_1.document
                                                 ->  Bitmap Heap Scan on helio_data.documents_9121_912019 collection_0_2_1
                                                       Output: collection_0_2_1.document
                                                       Recheck Cond: (collection_0_2_1.shard_key_value = '9121'::bigint)
                                                       ->  Bitmap Index Scan on _id_
                                                             Index Cond: (collection_0_2_1.shard_key_value = '9121'::bigint)
                             ->  Sort
                                   Output: "graphLookup_stage_2".document, "graphLookup_stage_2"."baseDocId", "graphLookup_stage_2".depth
                                   Sort Key: "graphLookup_stage_2"."baseDocId", "graphLookup_stage_2".depth
                                   ->  CTE Scan on "graphLookupRecurseStage" "graphLookup_stage_2"
                                         Output: "graphLookup_stage_2".document, "graphLookup_stage_2"."baseDocId", "graphLookup_stage_2".depth
(43 rows)

SELECT document FROM helio_api_catalog.bson_aggregation_pipeline('db',
    '{ "aggregate": "graph_lookup_travelers", "pipeline": [ { "$graphLookup": { "from": "graph_lookup_airports", "startWith": "$nearestAirport", "connectFromField": "connects", "connectToField": "airport", "as": "destinations", "depthField": "depth" } } ]}');
                                                                                                                                                                                                                                                                                                                                                   document                                                                                                                                                                                                                                                                                                                                                    
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "name" : "Dev", "nearestAirport" : "JFK", "destinations" : [ { "_id" : { "$numberInt" : "0" }, "airport" : "JFK", "connects" : [ "BOS", "ORD" ], "depth" : { "$numberInt" : "0" } }, { "_id" : { "$numberInt" : "1" }, "airport" : "BOS", "connects" : [ "JFK", "PWM" ], "depth" : { "$numberInt" : "1" } }, { "_id" : { "$numberInt" : "2" }, "airport" : "ORD", "connects" : [ "JFK" ], "depth" : { "$numberInt" : "1" } }, { "_id" : { "$numberInt" : "3" }, "airport" : "PWM", "connects" : [ "BOS", "LHR" ], "depth" : { "$numberInt" : "2" } }, { "_id" : { "$numberInt" : "4" }, "airport" : "LHR", "connects" : [ "PWM" ], "depth" : { "$numberInt" : "3" } } ] }
 { "_id" : { "$numberInt" : "2" }, "name" : "Eliot", "nearestAirport" : "JFK", "destinations" : [ { "_id" : { "$numberInt" : "0" }, "airport" : "JFK", "connects" : [ "BOS", "ORD" ], "depth" : { "$numberInt" : "0" } }, { "_id" : { "$numberInt" : "1" }, "airport" : "BOS", "connects" : [ "JFK", "PWM" ], "depth" : { "$numberInt" : "1" } }, { "_id" : { "$numberInt" : "2" }, "airport" : "ORD", "connects" : [ "JFK" ], "depth" : { "$numberInt" : "1" } }, { "_id" : { "$numberInt" : "3" }, "airport" : "PWM", "connects" : [ "BOS", "LHR" ], "depth" : { "$numberInt" : "2" } }, { "_id" : { "$numberInt" : "4" }, "airport" : "LHR", "connects" : [ "PWM" ], "depth" : { "$numberInt" : "3" } } ] }
 { "_id" : { "$numberInt" : "3" }, "name" : "Jeff", "nearestAirport" : "BOS", "destinations" : [ { "_id" : { "$numberInt" : "0" }, "airport" : "JFK", "connects" : [ "BOS", "ORD" ], "depth" : { "$numberInt" : "1" } }, { "_id" : { "$numberInt" : "1" }, "airport" : "BOS", "connects" : [ "JFK", "PWM" ], "depth" : { "$numberInt" : "0" } }, { "_id" : { "$numberInt" : "2" }, "airport" : "ORD", "connects" : [ "JFK" ], "depth" : { "$numberInt" : "2" } }, { "_id" : { "$numberInt" : "3" }, "airport" : "PWM", "connects" : [ "BOS", "LHR" ], "depth" : { "$numberInt" : "1" } }, { "_id" : { "$numberInt" : "4" }, "airport" : "LHR", "connects" : [ "PWM" ], "depth" : { "$numberInt" : "2" } } ] }
(3 rows)

EXPLAIN (VERBOSE ON, COSTS OFF) SELECT document FROM helio_api_catalog.bson_aggregation_pipeline('db',
    '{ "aggregate": "graph_lookup_travelers", "pipeline": [ { "$graphLookup": { "from": "graph_lookup_airports", "startWith": "$nearestAirport", "connectFromField": "connects", "connectToField": "airport", "as": "destinations", "depthField": "depth" } } ]}');
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               QUERY PLAN                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT helio_api_internal.bson_dollar_merge_documents(document, "addFields") AS document FROM (SELECT "graphLookupBase_stage_1".document, COALESCE((SELECT COALESCE(helio_api_catalog.bson_array_agg(agg_stage_sub_1_0.document, 'destinations'::text), '{ "destinations" : [  ] }'::helio_core.bson) AS document FROM (WITH RECURSIVE "graphLookupRecurseStage" AS (SELECT "*TLOCRN*".document, "*TLOCRN*".depth, "*TLOCRN*"."baseDocId", false AS is_cycle, ARRAY[ROW("*TLOCRN*"."baseDocId")] AS path FROM (SELECT collection_0_2.document, '{ "depth" : { "$numberInt" : "0" } }'::helio_core.bson AS depth, helio_api_catalog.bson_expression_get(collection_0_2.document, '{ "_id" : "$_id" }'::helio_core.bson) AS "baseDocId" FROM helio_data.documents_9121_912019 collection_0_2 WHERE ((collection_0_2.shard_key_value OPERATOR(pg_catalog.=) '9121'::bigint) AND helio_api_catalog.bson_dollar_in(collection_0_2.document, "graphLookupBase_stage_1"."inputExpr"))) "*TLOCRN*"(document, depth, "baseDocId") UNION ALL SELECT "*TROCRN*".document, "*TROCRN*".depth, "*TROCRN*"."baseDocId", CASE WHEN (ROW("*TROCRN*"."baseDocId") OPERATOR(pg_catalog.=) ANY ("*TROCRN*".path)) THEN true ELSE false END AS is_cycle, array_cat("*TROCRN*".path, ARRAY[ROW("*TROCRN*"."baseDocId")]) AS path FROM (SELECT collection_0_2.document, helio_api_catalog.bson_dollar_add_fields("lookupRecursive_stage_1".depth, '{ "depth" : { "$add" : [ "$depth", { "$numberInt" : "1" } ] } }'::helio_core.bson) AS depth, helio_api_catalog.bson_expression_get(collection_0_2.document, '{ "_id" : "$_id" }'::helio_core.bson) AS "baseDocId", "lookupRecursive_stage_1".is_cycle, "lookupRecursive_stage_1".path FROM helio_data.documents_9121_912019 collection_0_2, "graphLookupRecurseStage" "lookupRecursive_stage_1" WHERE ((collection_0_2.shard_key_value OPERATOR(pg_catalog.=) '9121'::bigint) AND helio_api_catalog.bson_dollar_in(collection_0_2.document, helio_api_catalog.bson_expression_get("lookupRecursive_stage_1".document, '{ "airport" : { "$makeArray" : "$connects" } }'::helio_core.bson, false)))) "*TROCRN*"(document, depth, "baseDocId", is_cycle, path) WHERE ("*TROCRN*".is_cycle OPERATOR(pg_catalog.<>) true)) SELECT DISTINCT ON ("graphLookup_stage_2"."baseDocId") helio_api_internal.bson_dollar_merge_documents("graphLookup_stage_2".document, "graphLookup_stage_2".depth) AS document FROM "graphLookupRecurseStage" "graphLookup_stage_2" ORDER BY "graphLookup_stage_2"."baseDocId", "graphLookup_stage_2".depth) agg_stage_sub_1_0), '{ "destinations" : [  ] }'::helio_core.bson) AS "addFields" FROM (SELECT collection.document, helio_api_catalog.bson_expression_get(collection.document, '{ "airport" : { "$makeArray" : "$nearestAirport" } }'::helio_core.bson, false) AS "inputExpr" FROM helio_data.documents_9122_912038 collection WHERE (collection.shard_key_value OPERATOR(pg_catalog.=) '9122'::bigint)) "graphLookupBase_stage_1") "graphLookup_stage_1"
         Node: host=localhost port=58070 dbname=regression
         ->  Bitmap Heap Scan on helio_data.documents_9122_912038 collection
               Output: helio_api_internal.bson_dollar_merge_documents(collection.document, COALESCE((SubPlan 2), '{ "destinations" : [  ] }'::helio_core.bson))
               Recheck Cond: (collection.shard_key_value = '9122'::bigint)
               ->  Bitmap Index Scan on _id_
                     Index Cond: (collection.shard_key_value = '9122'::bigint)
               SubPlan 2
                 ->  Aggregate
                       Output: COALESCE(helio_api_catalog.bson_array_agg((helio_api_internal.bson_dollar_merge_documents("graphLookup_stage_2".document, "graphLookup_stage_2".depth)), 'destinations'::text), '{ "destinations" : [  ] }'::helio_core.bson)
                       ->  Unique
                             Output: (helio_api_internal.bson_dollar_merge_documents("graphLookup_stage_2".document, "graphLookup_stage_2".depth)), "graphLookup_stage_2"."baseDocId", "graphLookup_stage_2".depth
                             CTE graphLookupRecurseStage
                               ->  Recursive Union
                                     ->  Bitmap Heap Scan on helio_data.documents_9121_912019 collection_0_2
                                           Output: collection_0_2.document, '{ "depth" : { "$numberInt" : "0" } }'::helio_core.bson, helio_api_catalog.bson_expression_get(collection_0_2.document, '{ "_id" : "$_id" }'::helio_core.bson, false), false, ARRAY[ROW(helio_api_catalog.bson_expression_get(collection_0_2.document, '{ "_id" : "$_id" }'::helio_core.bson, false))]
                                           Recheck Cond: (collection_0_2.shard_key_value = '9121'::bigint)
                                           Filter: (collection_0_2.document OPERATOR(helio_api_catalog.@*=) helio_api_catalog.bson_expression_get(collection.document, '{ "airport" : { "$makeArray" : "$nearestAirport" } }'::helio_core.bson, false))
                                           ->  Bitmap Index Scan on _id_
                                                 Index Cond: (collection_0_2.shard_key_value = '9121'::bigint)
                                     ->  Nested Loop
                                           Output: collection_0_2_1.document, helio_api_catalog.bson_dollar_add_fields("lookupRecursive_stage_1".depth, '{ "depth" : { "$add" : [ "$depth", { "$numberInt" : "1" } ] } }'::helio_core.bson), helio_api_catalog.bson_expression_get(collection_0_2_1.document, '{ "_id" : "$_id" }'::helio_core.bson, false), CASE WHEN (ROW(helio_api_catalog.bson_expression_get(collection_0_2_1.document, '{ "_id" : "$_id" }'::helio_core.bson, false)) = ANY ("lookupRecursive_stage_1".path)) THEN true ELSE false END, array_cat("lookupRecursive_stage_1".path, ARRAY[ROW(helio_api_catalog.bson_expression_get(collection_0_2_1.document, '{ "_id" : "$_id" }'::helio_core.bson, false))])
                                           Join Filter: helio_api_catalog.bson_dollar_in(collection_0_2_1.document, helio_api_catalog.bson_expression_get("lookupRecursive_stage_1".document, '{ "airport" : { "$makeArray" : "$connects" } }'::helio_core.bson, false))
                                           ->  WorkTable Scan on "graphLookupRecurseStage" "lookupRecursive_stage_1"
                                                 Output: "lookupRecursive_stage_1".document, "lookupRecursive_stage_1".depth, "lookupRecursive_stage_1"."baseDocId", "lookupRecursive_stage_1".is_cycle, "lookupRecursive_stage_1".path
                                                 Filter: (NOT "lookupRecursive_stage_1".is_cycle)
                                           ->  Materialize
                                                 Output: collection_0_2_1.document
                                                 ->  Bitmap Heap Scan on helio_data.documents_9121_912019 collection_0_2_1
                                                       Output: collection_0_2_1.document
                                                       Recheck Cond: (collection_0_2_1.shard_key_value = '9121'::bigint)
                                                       ->  Bitmap Index Scan on _id_
                                                             Index Cond: (collection_0_2_1.shard_key_value = '9121'::bigint)
                             ->  Sort
                                   Output: (helio_api_internal.bson_dollar_merge_documents("graphLookup_stage_2".document, "graphLookup_stage_2".depth)), "graphLookup_stage_2"."baseDocId", "graphLookup_stage_2".depth
                                   Sort Key: "graphLookup_stage_2"."baseDocId", "graphLookup_stage_2".depth
                                   ->  CTE Scan on "graphLookupRecurseStage" "graphLookup_stage_2"
                                         Output: helio_api_internal.bson_dollar_merge_documents("graphLookup_stage_2".document, "graphLookup_stage_2".depth), "graphLookup_stage_2"."baseDocId", "graphLookup_stage_2".depth
(43 rows)

-- $graphLookup inside $facet
SELECT document FROM helio_api_catalog.bson_aggregation_pipeline('db',
    '{ "aggregate": "graph_lookup_employees", "pipeline": [ { "$facet": { "inner": [ { "$graphLookup": { "from": "graph_lookup_employees", "startWith": "$reportsTo", "connectFromField": "reportsTo", "connectToField": "name", "as": "reportingHierarchy" } } ] } } ]}');
document
---------------------------------------------------------------------
 { "inner" : [ { "_id" : { "$numberInt" : "1" }, "name" : "Dev", "reportingHierarchy" : [  ] }, { "_id" : { "$numberInt" : "2" }, "name" : "Eliot", "reportsTo" : "Dev", "reportingHierarchy" : [ { "_id" : { "$numberInt" : "1" }, "name" : "Dev" } ] }, { "_id" : { "$numberInt" : "3" }, "name" : "Ron", "reportsTo" : "Eliot", "reportingHierarchy" : [ { "_id" : { "$numberInt" : "1" }, "name" : "Dev" }, { "_id" : { "$numberInt" : "2" }, "name" : "Eliot", "reportsTo" : "Dev" } ] }, { "_id" : { "$numberInt" : "4" }, "name" : "Andrew", "reportsTo" : "Eliot", "reportingHierarchy" : [ { "_id" : { "$numberInt" : "1" }, "name" : "Dev" }, { "_id" : { "$numberInt" : "2" }, "name" : "Eliot", "reportsTo" : "Dev" } ] }, { "_id" : { "$numberInt" : "5" }, "name" : "Asya", "reportsTo" : "Ron", "reportingHierarchy" : [ { "_id" : { "$numberInt" : "1" }, "name" : "Dev" }, { "_id" : { "$numberInt" : "2" }, "name" : "Eliot", "reportsTo" : "Dev" }, { "_id" : { "$numberInt" : "3" }, "name" : "Ron", "reportsTo" : "Eliot" } ] }, { "_id" : { "$numberInt" : "6" }, "name" : "Dan", "reportsTo" : "Andrew", "reportingHierarchy" : [ { "_id" : { "$numberInt" : "1" }, "name" : "Dev" }, { "_id" : { "$numberInt" : "2" }, "name" : "Eliot", "reportsTo" : "Dev" }, { "_id" : { "$numberInt" : "4" }, "name" : "Andrew", "reportsTo" : "Eliot" } ] } ] }
(1 row)

-- $graphLookup inside $lookup
SELECT document FROM helio_api_catalog.bson_aggregation_pipeline('db',
    '{ "aggregate": "graph_lookup_travelers", "pipeline": [ { "$lookup": { "from": "graph_lookup_employees", "as": "inner", "pipeline": [ { "$graphLookup": { "from": "graph_lookup_employees", "startWith": "$reportsTo", "connectFromField": "reportsTo", "connectToField": "name", "as": "reportingHierarchy" } } ] } } ]}');
document
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "name" : "Dev", "nearestAirport" : "JFK", "inner" : [ { "_id" : { "$numberInt" : "1" }, "name" : "Dev", "reportingHierarchy" : [  ] }, { "_id" : { "$numberInt" : "2" }, "name" : "Eliot", "reportsTo" : "Dev", "reportingHierarchy" : [ { "_id" : { "$numberInt" : "1" }, "name" : "Dev" } ] }, { "_id" : { "$numberInt" : "3" }, "name" : "Ron", "reportsTo" : "Eliot", "reportingHierarchy" : [ { "_id" : { "$numberInt" : "1" }, "name" : "Dev" }, { "_id" : { "$numberInt" : "2" }, "name" : "Eliot", "reportsTo" : "Dev" } ] }, { "_id" : { "$numberInt" : "4" }, "name" : "Andrew", "reportsTo" : "Eliot", "reportingHierarchy" : [ { "_id" : { "$numberInt" : "1" }, "name" : "Dev" }, { "_id" : { "$numberInt" : "2" }, "name" : "Eliot", "reportsTo" : "Dev" } ] }, { "_id" : { "$numberInt" : "5" }, "name" : "Asya", "reportsTo" : "Ron", "reportingHierarchy" : [ { "_id" : { "$numberInt" : "1" }, "name" : "Dev" }, { "_id" : { "$numberInt" : "2" }, "name" : "Eliot", "reportsTo" : "Dev" }, { "_id" : { "$numberInt" : "3" }, "name" : "Ron", "reportsTo" : "Eliot" } ] }, { "_id" : { "$numberInt" : "6" }, "name" : "Dan", "reportsTo" : "Andrew", "reportingHierarchy" : [ { "_id" : { "$numberInt" : "1" }, "name" : "Dev" }, { "_id" : { "$numberInt" : "2" }, "name" : "Eliot", "reportsTo" : "Dev" }, { "_id" : { "$numberInt" : "4" }, "name" : "Andrew", "reportsTo" : "Eliot" } ] } ] }
 { "_id" : { "$numberInt" : "2" }, "name" : "Eliot", "nearestAirport" : "JFK", "inner" : [ { "_id" : { "$numberInt" : "1" }, "name" : "Dev", "reportingHierarchy" : [  ] }, { "_id" : { "$numberInt" : "2" }, "name" : "Eliot", "reportsTo" : "Dev", "reportingHierarchy" : [ { "_id" : { "$numberInt" : "1" }, "name" : "Dev" } ] }, { "_id" : { "$numberInt" : "3" }, "name" : "Ron", "reportsTo" : "Eliot", "reportingHierarchy" : [ { "_id" : { "$numberInt" : "1" }, "name" : "Dev" }, { "_id" : { "$numberInt" : "2" }, "name" : "Eliot", "reportsTo" : "Dev" } ] }, { "_id" : { "$numberInt" : "4" }, "name" : "Andrew", "reportsTo" : "Eliot", "reportingHierarchy" : [ { "_id" : { "$numberInt" : "1" }, "name" : "Dev" }, { "_id" : { "$numberInt" : "2" }, "name" : "Eliot", "reportsTo" : "Dev" } ] }, { "_id" : { "$numberInt" : "5" }, "name" : "Asya", "reportsTo" : "Ron", "reportingHierarchy" : [ { "_id" : { "$numberInt" : "1" }, "name" : "Dev" }, { "_id" : { "$numberInt" : "2" }, "name" : "Eliot", "reportsTo" : "Dev" }, { "_id" : { "$numberInt" : "3" }, "name" : "Ron", "reportsTo" : "Eliot" } ] }, { "_id" : { "$numberInt" : "6" }, "name" : "Dan", "reportsTo" : "Andrew", "reportingHierarchy" : [ { "_id" : { "$numberInt" : "1" }, "name" : "Dev" }, { "_id" : { "$numberInt" : "2" }, "name" : "Eliot", "reportsTo" : "Dev" }, { "_id" : { "$numberInt" : "4" }, "name" : "Andrew", "reportsTo" : "Eliot" } ] } ] }
 { "_id" : { "$numberInt" : "3" }, "name" : "Jeff", "nearestAirport" : "BOS", "inner" : [ { "_id" : { "$numberInt" : "1" }, "name" : "Dev", "reportingHierarchy" : [  ] }, { "_id" : { "$numberInt" : "2" }, "name" : "Eliot", "reportsTo" : "Dev", "reportingHierarchy" : [ { "_id" : { "$numberInt" : "1" }, "name" : "Dev" } ] }, { "_id" : { "$numberInt" : "3" }, "name" : "Ron", "reportsTo" : "Eliot", "reportingHierarchy" : [ { "_id" : { "$numberInt" : "1" }, "name" : "Dev" }, { "_id" : { "$numberInt" : "2" }, "name" : "Eliot", "reportsTo" : "Dev" } ] }, { "_id" : { "$numberInt" : "4" }, "name" : "Andrew", "reportsTo" : "Eliot", "reportingHierarchy" : [ { "_id" : { "$numberInt" : "1" }, "name" : "Dev" }, { "_id" : { "$numberInt" : "2" }, "name" : "Eliot", "reportsTo" : "Dev" } ] }, { "_id" : { "$numberInt" : "5" }, "name" : "Asya", "reportsTo" : "Ron", "reportingHierarchy" : [ { "_id" : { "$numberInt" : "1" }, "name" : "Dev" }, { "_id" : { "$numberInt" : "2" }, "name" : "Eliot", "reportsTo" : "Dev" }, { "_id" : { "$numberInt" : "3" }, "name" : "Ron", "reportsTo" : "Eliot" } ] }, { "_id" : { "$numberInt" : "6" }, "name" : "Dan", "reportsTo" : "Andrew", "reportingHierarchy" : [ { "_id" : { "$numberInt" : "1" }, "name" : "Dev" }, { "_id" : { "$numberInt" : "2" }, "name" : "Eliot", "reportsTo" : "Dev" }, { "_id" : { "$numberInt" : "4" }, "name" : "Andrew", "reportsTo" : "Eliot" } ] } ] }
(3 rows)

-- source can be sharded
SELECT helio_api.shard_collection('db', 'graph_lookup_travelers', '{ "_id": "hashed" }', false);
 shard_collection 
---------------------------------------------------------------------
 
(1 row)

SELECT document FROM helio_api_catalog.bson_aggregation_pipeline('db',
    '{ "aggregate": "graph_lookup_travelers", "pipeline": [ { "$graphLookup": { "from": "graph_lookup_airports", "startWith": "$nearestAirport", "connectFromField": "connects", "connectToField": "airport", "as": "destinations", "maxDepth": 2 } } ]}');
                                                                                                                                                                                                                                                              document                                                                                                                                                                                                                                                              
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "2" }, "name" : "Eliot", "nearestAirport" : "JFK", "destinations" : [ { "_id" : { "$numberInt" : "0" }, "airport" : "JFK", "connects" : [ "BOS", "ORD" ] }, { "_id" : { "$numberInt" : "1" }, "airport" : "BOS", "connects" : [ "JFK", "PWM" ] }, { "_id" : { "$numberInt" : "2" }, "airport" : "ORD", "connects" : [ "JFK" ] }, { "_id" : { "$numberInt" : "3" }, "airport" : "PWM", "connects" : [ "BOS", "LHR" ] } ] }
 { "_id" : { "$numberInt" : "3" }, "name" : "Jeff", "nearestAirport" : "BOS", "destinations" : [ { "_id" : { "$numberInt" : "0" }, "airport" : "JFK", "connects" : [ "BOS", "ORD" ] }, { "_id" : { "$numberInt" : "1" }, "airport" : "BOS", "connects" : [ "JFK", "PWM" ] }, { "_id" : { "$numberInt" : "2" }, "airport" : "ORD", "connects" : [ "JFK" ] }, { "_id" : { "$numberInt" : "3" }, "airport" : "PWM", "connects" : [ "BOS", "LHR" ] }, { "_id" : { "$numberInt" : "4" }, "airport" : "LHR", "connects" : [ "PWM" ] } ] }
 { "_id" : { "$numberInt" : "1" }, "name" : "Dev", "nearestAirport" : "JFK", "destinations" : [ { "_id" : { "$numberInt" : "0" }, "airport" : "JFK", "connects" : [ "BOS", "ORD" ] }, { "_id" : { "$numberInt" : "1" }, "airport" : "BOS", "connects" : [ "JFK", "PWM" ] }, { "_id" : { "$numberInt" : "2" }, "airport" : "ORD", "connects" : [ "JFK" ] }, { "_id" : { "$numberInt" : "3" }, "airport" : "PWM", "connects" : [ "BOS", "LHR" ] } ] }
(3 rows)

-- target cannot be sharded
SELECT helio_api.shard_collection('db', 'graph_lookup_airports', '{ "_id": "hashed" }', false);
 shard_collection 
---------------------------------------------------------------------
 
(1 row)

SELECT helio_api.shard_collection('db', 'graph_lookup_employees', '{ "_id": "hashed" }', false);
 shard_collection 
---------------------------------------------------------------------
 
(1 row)

SELECT document FROM helio_api_catalog.bson_aggregation_pipeline('db',
    '{ "aggregate": "graph_lookup_employees", "pipeline": [ { "$graphLookup": { "from": "graph_lookup_employees", "startWith": "$reportsTo", "connectFromField": "reportsTo", "connectToField": "name", "as": "reportingHierarchy" } } ]}');
ERROR:  $graphLookup with 'from' on a sharded collection is not supported
SELECT document FROM helio_api_catalog.bson_aggregation_pipeline('db',
    '{ "aggregate": "graph_lookup_travelers", "pipeline": [ { "$graphLookup": { "from": "graph_lookup_airports", "startWith": "$nearestAirport", "connectFromField": "connects", "connectToField": "airport", "as": "destinations", "maxDepth": 2 } } ]}');
ERROR:  $graphLookup with 'from' on a sharded collection is not supported

SET search_path TO helio_core,helio_api,helio_api_catalog,helio_api_internal;
SET citus.next_shard_id TO 1220000;
SET helio_api.next_collection_id TO 12200;
SET helio_api.next_collection_index_id TO 12200;
SELECT helio_api.insert_one('db','objColl1','{ "_id": 1, "year": 2017, "item": "A", "quantity": { "2017Q1": 1, "2017Q2": 300 } }', NULL);
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db','objColl1','{ "_id": 2, "year": 2016, "item": "A", "quantity": { "2016Q1": 400, "2016Q2": 300, "2016Q3": 0, "2016Q4": 0 } }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db','objColl1','{ "_id": 3, "year": 2017, "item": "B", "quantity": { "2017Q1": 300 } }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db','objColl1','{ "_id": 4, "year": 2016, "item": "B", "quantity": { "2016Q3": 100, "2016Q4": 250 } }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db','objColl1','{ "_id": 5, "year": 2017, "item": "C", "quantity": { "2016Q3": 1200, "2016Q4": 312 } }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

/* running multiple $mergeObjects accumulators with different expressions */
SELECT document FROM helio_api_catalog.bson_aggregation_pipeline('db', '{ "aggregate": "objColl1", "pipeline": [ { "$group": { "_id": "$year", "mergedobjColl1": { "$mergeObjects": "$quantity" } } } ] }');
                                                                                                     document                                                                                                      
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "2016" }, "mergedobjColl1" : { "2016Q1" : { "$numberInt" : "400" }, "2016Q2" : { "$numberInt" : "300" }, "2016Q3" : { "$numberInt" : "100" }, "2016Q4" : { "$numberInt" : "250" } } }
 { "_id" : { "$numberInt" : "2017" }, "mergedobjColl1" : { "2017Q1" : { "$numberInt" : "300" }, "2017Q2" : { "$numberInt" : "300" }, "2016Q3" : { "$numberInt" : "1200" }, "2016Q4" : { "$numberInt" : "312" } } }
(2 rows)

SELECT document FROM helio_api_catalog.bson_aggregation_pipeline('db', '{ "aggregate": "objColl1", "pipeline": [ { "$group": { "_id": "$item", "mergedobjColl1": { "$mergeObjects": "$quantity" } } } ] }');
                                                                                                                            document                                                                                                                            
---------------------------------------------------------------------
 { "_id" : "A", "mergedobjColl1" : { "2017Q1" : { "$numberInt" : "1" }, "2017Q2" : { "$numberInt" : "300" }, "2016Q1" : { "$numberInt" : "400" }, "2016Q2" : { "$numberInt" : "300" }, "2016Q3" : { "$numberInt" : "0" }, "2016Q4" : { "$numberInt" : "0" } } }
 { "_id" : "B", "mergedobjColl1" : { "2017Q1" : { "$numberInt" : "300" }, "2016Q3" : { "$numberInt" : "100" }, "2016Q4" : { "$numberInt" : "250" } } }
 { "_id" : "C", "mergedobjColl1" : { "2016Q3" : { "$numberInt" : "1200" }, "2016Q4" : { "$numberInt" : "312" } } }
(3 rows)

SELECT document FROM helio_api_catalog.bson_aggregation_pipeline('db', '{ "aggregate": "objColl1", "pipeline": [ { "$group": { "_id": "$year", "lastItemSold": { "$mergeObjects": { "item": "$item" } } } } ] }');
                                 document                                 
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "2016" }, "lastItemSold" : { "item" : "B" } }
 { "_id" : { "$numberInt" : "2017" }, "lastItemSold" : { "item" : "C" } }
(2 rows)

EXPLAIN (VERBOSE ON, COSTS OFF) SELECT document FROM helio_api_catalog.bson_aggregation_pipeline('db', '{ "aggregate": "objColl1", "pipeline": [ { "$group": { "_id": "$year", "mergedobjColl1": { "$mergeObjects": "$quantity" } } } ] }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT helio_core.bson_repath_and_build(c1, c2, c3, c4) AS document FROM (SELECT '_id'::text AS c1, helio_api_catalog.bson_expression_get(agg_stage_0_1.document, '{ "" : "$year" }'::helio_core.bson, true) AS c2, 'mergedobjColl1'::text AS c3, helio_api_internal.bson_merge_objects_on_sorted(helio_api_catalog.bson_expression_get(agg_stage_0_1.document, '{ "" : "$quantity" }'::helio_core.bson, true)) AS c4 FROM (SELECT collection.document FROM helio_data.documents_12200_1220001 collection WHERE (collection.shard_key_value OPERATOR(pg_catalog.=) '12200'::bigint)) agg_stage_0_1 GROUP BY (helio_api_catalog.bson_expression_get(agg_stage_0_1.document, '{ "" : "$year" }'::helio_core.bson, true))) agg_stage_0
         Node: host=localhost port=58070 dbname=regression
         ->  Subquery Scan on agg_stage_0
               Output: helio_core.bson_repath_and_build(agg_stage_0.c1, agg_stage_0.c2, agg_stage_0.c3, agg_stage_0.c4)
               ->  GroupAggregate
                     Output: '_id'::text, (helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$year" }'::helio_core.bson, true)), 'mergedobjColl1'::text, helio_api_internal.bson_merge_objects_on_sorted(helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$quantity" }'::helio_core.bson, true))
                     Group Key: (helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$year" }'::helio_core.bson, true))
                     ->  Sort
                           Output: (helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$year" }'::helio_core.bson, true)), collection.document
                           Sort Key: (helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$year" }'::helio_core.bson, true))
                           ->  Bitmap Heap Scan on helio_data.documents_12200_1220001 collection
                                 Output: helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$year" }'::helio_core.bson, true), collection.document
                                 Recheck Cond: (collection.shard_key_value = '12200'::bigint)
                                 ->  Bitmap Index Scan on _id_
                                       Index Cond: (collection.shard_key_value = '12200'::bigint)
(20 rows)

EXPLAIN (VERBOSE ON, COSTS OFF) SELECT document FROM helio_api_catalog.bson_aggregation_pipeline('db', '{ "aggregate": "objColl1", "pipeline": [ { "$group": { "_id": "$item", "mergedobjColl1": { "$mergeObjects": "$quantity" } } } ] }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT helio_core.bson_repath_and_build(c1, c2, c3, c4) AS document FROM (SELECT '_id'::text AS c1, helio_api_catalog.bson_expression_get(agg_stage_0_1.document, '{ "" : "$item" }'::helio_core.bson, true) AS c2, 'mergedobjColl1'::text AS c3, helio_api_internal.bson_merge_objects_on_sorted(helio_api_catalog.bson_expression_get(agg_stage_0_1.document, '{ "" : "$quantity" }'::helio_core.bson, true)) AS c4 FROM (SELECT collection.document FROM helio_data.documents_12200_1220001 collection WHERE (collection.shard_key_value OPERATOR(pg_catalog.=) '12200'::bigint)) agg_stage_0_1 GROUP BY (helio_api_catalog.bson_expression_get(agg_stage_0_1.document, '{ "" : "$item" }'::helio_core.bson, true))) agg_stage_0
         Node: host=localhost port=58070 dbname=regression
         ->  Subquery Scan on agg_stage_0
               Output: helio_core.bson_repath_and_build(agg_stage_0.c1, agg_stage_0.c2, agg_stage_0.c3, agg_stage_0.c4)
               ->  GroupAggregate
                     Output: '_id'::text, (helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$item" }'::helio_core.bson, true)), 'mergedobjColl1'::text, helio_api_internal.bson_merge_objects_on_sorted(helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$quantity" }'::helio_core.bson, true))
                     Group Key: (helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$item" }'::helio_core.bson, true))
                     ->  Sort
                           Output: (helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$item" }'::helio_core.bson, true)), collection.document
                           Sort Key: (helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$item" }'::helio_core.bson, true))
                           ->  Bitmap Heap Scan on helio_data.documents_12200_1220001 collection
                                 Output: helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$item" }'::helio_core.bson, true), collection.document
                                 Recheck Cond: (collection.shard_key_value = '12200'::bigint)
                                 ->  Bitmap Index Scan on _id_
                                       Index Cond: (collection.shard_key_value = '12200'::bigint)
(20 rows)

EXPLAIN (VERBOSE ON, COSTS OFF) SELECT document FROM helio_api_catalog.bson_aggregation_pipeline('db', '{ "aggregate": "objColl1", "pipeline": [ { "$group": { "_id": "$year", "lastItemSold": { "$mergeObjects": { "item": "$item" } } } } ] }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT helio_core.bson_repath_and_build(c1, c2, c3, c4) AS document FROM (SELECT '_id'::text AS c1, helio_api_catalog.bson_expression_get(agg_stage_0_1.document, '{ "" : "$year" }'::helio_core.bson, true) AS c2, 'lastItemSold'::text AS c3, helio_api_internal.bson_merge_objects_on_sorted(helio_api_catalog.bson_expression_get(agg_stage_0_1.document, '{ "" : { "item" : "$item" } }'::helio_core.bson, true)) AS c4 FROM (SELECT collection.document FROM helio_data.documents_12200_1220001 collection WHERE (collection.shard_key_value OPERATOR(pg_catalog.=) '12200'::bigint)) agg_stage_0_1 GROUP BY (helio_api_catalog.bson_expression_get(agg_stage_0_1.document, '{ "" : "$year" }'::helio_core.bson, true))) agg_stage_0
         Node: host=localhost port=58070 dbname=regression
         ->  Subquery Scan on agg_stage_0
               Output: helio_core.bson_repath_and_build(agg_stage_0.c1, agg_stage_0.c2, agg_stage_0.c3, agg_stage_0.c4)
               ->  GroupAggregate
                     Output: '_id'::text, (helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$year" }'::helio_core.bson, true)), 'lastItemSold'::text, helio_api_internal.bson_merge_objects_on_sorted(helio_api_catalog.bson_expression_get(collection.document, '{ "" : { "item" : "$item" } }'::helio_core.bson, true))
                     Group Key: (helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$year" }'::helio_core.bson, true))
                     ->  Sort
                           Output: (helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$year" }'::helio_core.bson, true)), collection.document
                           Sort Key: (helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$year" }'::helio_core.bson, true))
                           ->  Bitmap Heap Scan on helio_data.documents_12200_1220001 collection
                                 Output: helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$year" }'::helio_core.bson, true), collection.document
                                 Recheck Cond: (collection.shard_key_value = '12200'::bigint)
                                 ->  Bitmap Index Scan on _id_
                                       Index Cond: (collection.shard_key_value = '12200'::bigint)
(20 rows)

SELECT helio_api.insert_one('db','objColl2','{ "_id": 13, "group": 1, "obj": {}, "c": null }', NULL);
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db','objColl2','{ "_id": 14, "group": 1, "obj": { "a": 2, "b": 2 } }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db','objColl2','{ "_id": 15, "group": 1, "obj": { "a": 1, "c": 3, "b": null } }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db','objColl2','{ "_id": 16, "group": 2, "obj": { "a": 1, "b": 1 }, "c": null }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

/* running multiple $mergeObjects accumulators with different expressions */
SELECT document FROM helio_api_catalog.bson_aggregation_pipeline('db', '{ "aggregate": "objColl2", "pipeline": [ { "$group": { "_id": "$group", "mergedDocument": { "$mergeObjects": "$obj" } } } ] }');
                                                             document                                                              
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "mergedDocument" : { "a" : { "$numberInt" : "1" }, "b" : null, "c" : { "$numberInt" : "3" } } }
 { "_id" : { "$numberInt" : "2" }, "mergedDocument" : { "a" : { "$numberInt" : "1" }, "b" : { "$numberInt" : "1" } } }
(2 rows)

SELECT document FROM helio_api_catalog.bson_aggregation_pipeline('db', '{ "aggregate": "objColl2", "pipeline": [ { "$group": { "_id": "$group", "mergedDocument": { "$mergeObjects": "$obj.a" } } } ] }');
ERROR:  $mergeObjects requires object inputs, but input 2 is of type int
SELECT document FROM helio_api_catalog.bson_aggregation_pipeline('db', '{ "aggregate": "objColl2", "pipeline": [ { "$group": { "_id": "$group", "mergedDocument": { "$mergeObjects": { "result": "$obj.b" } } } } ] }');
                                           document                                           
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "mergedDocument" : { "result" : null } }
 { "_id" : { "$numberInt" : "2" }, "mergedDocument" : { "result" : { "$numberInt" : "1" } } }
(2 rows)

SELECT document FROM helio_api_catalog.bson_aggregation_pipeline('db', '{ "aggregate": "objColl2", "pipeline": [ { "$group": { "_id": "$group", "mergedDocument": { "$mergeObjects": "$c" } } } ] }');
                          document                           
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "mergedDocument" : null }
 { "_id" : { "$numberInt" : "2" }, "mergedDocument" : null }
(2 rows)

EXPLAIN (VERBOSE ON, COSTS OFF) SELECT document FROM helio_api_catalog.bson_aggregation_pipeline('db', '{ "aggregate": "objColl2", "pipeline": [ { "$group": { "_id": "$group", "mergedDocument": { "$mergeObjects": "$obj" } } } ] }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT helio_core.bson_repath_and_build(c1, c2, c3, c4) AS document FROM (SELECT '_id'::text AS c1, helio_api_catalog.bson_expression_get(agg_stage_0_1.document, '{ "" : "$group" }'::helio_core.bson, true) AS c2, 'mergedDocument'::text AS c3, helio_api_internal.bson_merge_objects_on_sorted(helio_api_catalog.bson_expression_get(agg_stage_0_1.document, '{ "" : "$obj" }'::helio_core.bson, true)) AS c4 FROM (SELECT collection.document FROM helio_data.documents_12201_1220018 collection WHERE (collection.shard_key_value OPERATOR(pg_catalog.=) '12201'::bigint)) agg_stage_0_1 GROUP BY (helio_api_catalog.bson_expression_get(agg_stage_0_1.document, '{ "" : "$group" }'::helio_core.bson, true))) agg_stage_0
         Node: host=localhost port=58070 dbname=regression
         ->  Subquery Scan on agg_stage_0
               Output: helio_core.bson_repath_and_build(agg_stage_0.c1, agg_stage_0.c2, agg_stage_0.c3, agg_stage_0.c4)
               ->  GroupAggregate
                     Output: '_id'::text, (helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$group" }'::helio_core.bson, true)), 'mergedDocument'::text, helio_api_internal.bson_merge_objects_on_sorted(helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$obj" }'::helio_core.bson, true))
                     Group Key: (helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$group" }'::helio_core.bson, true))
                     ->  Sort
                           Output: (helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$group" }'::helio_core.bson, true)), collection.document
                           Sort Key: (helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$group" }'::helio_core.bson, true))
                           ->  Bitmap Heap Scan on helio_data.documents_12201_1220018 collection
                                 Output: helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$group" }'::helio_core.bson, true), collection.document
                                 Recheck Cond: (collection.shard_key_value = '12201'::bigint)
                                 ->  Bitmap Index Scan on _id_
                                       Index Cond: (collection.shard_key_value = '12201'::bigint)
(20 rows)

EXPLAIN (VERBOSE ON, COSTS OFF) SELECT document FROM helio_api_catalog.bson_aggregation_pipeline('db', '{ "aggregate": "objColl2", "pipeline": [ { "$group": { "_id": "$group", "mergedDocument": { "$mergeObjects": "$obj.a" } } } ] }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT helio_core.bson_repath_and_build(c1, c2, c3, c4) AS document FROM (SELECT '_id'::text AS c1, helio_api_catalog.bson_expression_get(agg_stage_0_1.document, '{ "" : "$group" }'::helio_core.bson, true) AS c2, 'mergedDocument'::text AS c3, helio_api_internal.bson_merge_objects_on_sorted(helio_api_catalog.bson_expression_get(agg_stage_0_1.document, '{ "" : "$obj.a" }'::helio_core.bson, true)) AS c4 FROM (SELECT collection.document FROM helio_data.documents_12201_1220018 collection WHERE (collection.shard_key_value OPERATOR(pg_catalog.=) '12201'::bigint)) agg_stage_0_1 GROUP BY (helio_api_catalog.bson_expression_get(agg_stage_0_1.document, '{ "" : "$group" }'::helio_core.bson, true))) agg_stage_0
         Node: host=localhost port=58070 dbname=regression
         ->  Subquery Scan on agg_stage_0
               Output: helio_core.bson_repath_and_build(agg_stage_0.c1, agg_stage_0.c2, agg_stage_0.c3, agg_stage_0.c4)
               ->  GroupAggregate
                     Output: '_id'::text, (helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$group" }'::helio_core.bson, true)), 'mergedDocument'::text, helio_api_internal.bson_merge_objects_on_sorted(helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$obj.a" }'::helio_core.bson, true))
                     Group Key: (helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$group" }'::helio_core.bson, true))
                     ->  Sort
                           Output: (helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$group" }'::helio_core.bson, true)), collection.document
                           Sort Key: (helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$group" }'::helio_core.bson, true))
                           ->  Bitmap Heap Scan on helio_data.documents_12201_1220018 collection
                                 Output: helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$group" }'::helio_core.bson, true), collection.document
                                 Recheck Cond: (collection.shard_key_value = '12201'::bigint)
                                 ->  Bitmap Index Scan on _id_
                                       Index Cond: (collection.shard_key_value = '12201'::bigint)
(20 rows)

EXPLAIN (VERBOSE ON, COSTS OFF) SELECT document FROM helio_api_catalog.bson_aggregation_pipeline('db', '{ "aggregate": "objColl2", "pipeline": [ { "$group": { "_id": "$group", "mergedDocument": { "$mergeObjects": { "result": "$obj.b" } } } } ] }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT helio_core.bson_repath_and_build(c1, c2, c3, c4) AS document FROM (SELECT '_id'::text AS c1, helio_api_catalog.bson_expression_get(agg_stage_0_1.document, '{ "" : "$group" }'::helio_core.bson, true) AS c2, 'mergedDocument'::text AS c3, helio_api_internal.bson_merge_objects_on_sorted(helio_api_catalog.bson_expression_get(agg_stage_0_1.document, '{ "" : { "result" : "$obj.b" } }'::helio_core.bson, true)) AS c4 FROM (SELECT collection.document FROM helio_data.documents_12201_1220018 collection WHERE (collection.shard_key_value OPERATOR(pg_catalog.=) '12201'::bigint)) agg_stage_0_1 GROUP BY (helio_api_catalog.bson_expression_get(agg_stage_0_1.document, '{ "" : "$group" }'::helio_core.bson, true))) agg_stage_0
         Node: host=localhost port=58070 dbname=regression
         ->  Subquery Scan on agg_stage_0
               Output: helio_core.bson_repath_and_build(agg_stage_0.c1, agg_stage_0.c2, agg_stage_0.c3, agg_stage_0.c4)
               ->  GroupAggregate
                     Output: '_id'::text, (helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$group" }'::helio_core.bson, true)), 'mergedDocument'::text, helio_api_internal.bson_merge_objects_on_sorted(helio_api_catalog.bson_expression_get(collection.document, '{ "" : { "result" : "$obj.b" } }'::helio_core.bson, true))
                     Group Key: (helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$group" }'::helio_core.bson, true))
                     ->  Sort
                           Output: (helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$group" }'::helio_core.bson, true)), collection.document
                           Sort Key: (helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$group" }'::helio_core.bson, true))
                           ->  Bitmap Heap Scan on helio_data.documents_12201_1220018 collection
                                 Output: helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$group" }'::helio_core.bson, true), collection.document
                                 Recheck Cond: (collection.shard_key_value = '12201'::bigint)
                                 ->  Bitmap Index Scan on _id_
                                       Index Cond: (collection.shard_key_value = '12201'::bigint)
(20 rows)

EXPLAIN (VERBOSE ON, COSTS OFF) SELECT document FROM helio_api_catalog.bson_aggregation_pipeline('db', '{ "aggregate": "objColl2", "pipeline": [ { "$group": { "_id": "$group", "mergedDocument": { "$mergeObjects": "$c" } } } ] }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT helio_core.bson_repath_and_build(c1, c2, c3, c4) AS document FROM (SELECT '_id'::text AS c1, helio_api_catalog.bson_expression_get(agg_stage_0_1.document, '{ "" : "$group" }'::helio_core.bson, true) AS c2, 'mergedDocument'::text AS c3, helio_api_internal.bson_merge_objects_on_sorted(helio_api_catalog.bson_expression_get(agg_stage_0_1.document, '{ "" : "$c" }'::helio_core.bson, true)) AS c4 FROM (SELECT collection.document FROM helio_data.documents_12201_1220018 collection WHERE (collection.shard_key_value OPERATOR(pg_catalog.=) '12201'::bigint)) agg_stage_0_1 GROUP BY (helio_api_catalog.bson_expression_get(agg_stage_0_1.document, '{ "" : "$group" }'::helio_core.bson, true))) agg_stage_0
         Node: host=localhost port=58070 dbname=regression
         ->  Subquery Scan on agg_stage_0
               Output: helio_core.bson_repath_and_build(agg_stage_0.c1, agg_stage_0.c2, agg_stage_0.c3, agg_stage_0.c4)
               ->  GroupAggregate
                     Output: '_id'::text, (helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$group" }'::helio_core.bson, true)), 'mergedDocument'::text, helio_api_internal.bson_merge_objects_on_sorted(helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$c" }'::helio_core.bson, true))
                     Group Key: (helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$group" }'::helio_core.bson, true))
                     ->  Sort
                           Output: (helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$group" }'::helio_core.bson, true)), collection.document
                           Sort Key: (helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$group" }'::helio_core.bson, true))
                           ->  Bitmap Heap Scan on helio_data.documents_12201_1220018 collection
                                 Output: helio_api_catalog.bson_expression_get(collection.document, '{ "" : "$group" }'::helio_core.bson, true), collection.document
                                 Recheck Cond: (collection.shard_key_value = '12201'::bigint)
                                 ->  Bitmap Index Scan on _id_
                                       Index Cond: (collection.shard_key_value = '12201'::bigint)
(20 rows)

/* running mergeObjects with intermediate size of more than 100mb */
DO $$
DECLARE i int;
BEGIN
-- each doc is "%s": 5 MB - ~5.5 MB & there's 25 of them
FOR i IN 1..25 LOOP
PERFORM helio_api.insert_one('db', 'sizes_test', FORMAT('{ "_id": %s, "groupName": "A", "c": { "%s": [ %s "d" ] } }', i, i, repeat('"' || i || repeat('a', 1000) || '", ', 5000))::helio_core.bson);
END LOOP;
END;
$$;
NOTICE:  creating collection
/* should fail with intermediate size error */
SELECT document FROM helio_api_catalog.bson_aggregation_pipeline('db', '{ "aggregate": "sizes_test", "pipeline": [ { "$group": { "_id": "$groupName", "mergedDocument": { "$mergeObjects": "$c" } } } ] }');
ERROR:  Size 106297374 is larger than maximum size allowed for an intermediate document 104857600
/* shard collections and test for order and validations */
SELECT helio_api.shard_collection('db', 'objColl1', '{ "_id": "hashed" }', false);
 shard_collection 
---------------------------------------------------------------------
 
(1 row)

SELECT document FROM helio_api_catalog.bson_aggregation_pipeline('db', '{ "aggregate": "objColl1", "pipeline": [ { "$sort": { "item": 1 } }, { "$group": { "_id": "$year", "mergedobjColl1": { "$mergeObjects": "$quantity" } } } ] }');
                                                                                                     document                                                                                                      
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "2016" }, "mergedobjColl1" : { "2016Q1" : { "$numberInt" : "400" }, "2016Q2" : { "$numberInt" : "300" }, "2016Q3" : { "$numberInt" : "100" }, "2016Q4" : { "$numberInt" : "250" } } }
 { "_id" : { "$numberInt" : "2017" }, "mergedobjColl1" : { "2017Q1" : { "$numberInt" : "300" }, "2017Q2" : { "$numberInt" : "300" }, "2016Q3" : { "$numberInt" : "1200" }, "2016Q4" : { "$numberInt" : "312" } } }
(2 rows)

SELECT document FROM helio_api_catalog.bson_aggregation_pipeline('db', '{ "aggregate": "objColl1", "pipeline": [ { "$sort": { "item": 1 } }, { "$group": { "_id": "$item", "mergedobjColl1": { "$mergeObjects": "$quantity" } } } ] }');
                                                                                                                            document                                                                                                                            
---------------------------------------------------------------------
 { "_id" : "C", "mergedobjColl1" : { "2016Q3" : { "$numberInt" : "1200" }, "2016Q4" : { "$numberInt" : "312" } } }
 { "_id" : "B", "mergedobjColl1" : { "2016Q3" : { "$numberInt" : "100" }, "2016Q4" : { "$numberInt" : "250" }, "2017Q1" : { "$numberInt" : "300" } } }
 { "_id" : "A", "mergedobjColl1" : { "2016Q1" : { "$numberInt" : "400" }, "2016Q2" : { "$numberInt" : "300" }, "2016Q3" : { "$numberInt" : "0" }, "2016Q4" : { "$numberInt" : "0" }, "2017Q1" : { "$numberInt" : "1" }, "2017Q2" : { "$numberInt" : "300" } } }
(3 rows)

SELECT document FROM helio_api_catalog.bson_aggregation_pipeline('db', '{ "aggregate": "objColl1", "pipeline": [ { "$sort": { "item": 1 } }, { "$group": { "_id": "$year", "lastItemSold": { "$mergeObjects": { "item": "$item" } } } } ] }');
                                 document                                 
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "2016" }, "lastItemSold" : { "item" : "B" } }
 { "_id" : { "$numberInt" : "2017" }, "lastItemSold" : { "item" : "C" } }
(2 rows)

SELECT document FROM helio_api_catalog.bson_aggregation_pipeline('db', '{ "aggregate": "objColl1", "pipeline": [ { "$sort": { "item": 1 } }, { "$group": { "_id": "$year", "shouldFail": { "$mergeObjects": "$item" } } } ] }');
ERROR:  $mergeObjects requires object inputs, but input "A" is of type string
select helio_api.drop_collection('db','objColl1');
 drop_collection 
---------------------------------------------------------------------
 t
(1 row)

select helio_api.drop_collection('db','objColl2');
 drop_collection 
---------------------------------------------------------------------
 t
(1 row)

select helio_api.drop_collection('db','sizes_test');
 drop_collection 
---------------------------------------------------------------------
 t
(1 row)

